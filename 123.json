%%bash
# === Kaggle Cell 1: System setup & ComfyUI base install ===
set -e
cd /kaggle/working

# Update & deps
apt -y update -qq
apt -y install -qq libgl1-mesa-glx wget git

# Clone ComfyUI (skip jika sudah ada)
if [ ! -d "ComfyUI" ]; then
  git clone https://github.com/comfyanonymous/ComfyUI.git
fi
cd ComfyUI

# Install PyTorch (CUDA 12.1) + requirements
pip install --upgrade pip
pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121
pip install -r requirements.txt

# Cek GPU lewat Python inline
python - << 'PY'
import torch
print("‚úÖ CUDA available:", torch.cuda.is_available())
print("üí° GPU device:", torch.cuda.get_device_name(0) if torch.cuda.is_available() else "None")
PY


111111111111111111111111111111


%%bash
# === Kaggle Cell 2: Workspace & symlinks (no Google Drive) ===
set -e
export COMFY_DIR="/kaggle/working/ComfyUI"
export BASE_DIR="/kaggle/working/ComfyData"

# Buat struktur folder
mkdir -p "$BASE_DIR"/models/{checkpoints,controlnet,vae,upscale_models,clip,unet,diffusion_models}
mkdir -p "$BASE_DIR"/{custom_nodes,input,output,temp,user}

# Refresh symlink dalam repo ComfyUI
for name in models custom_nodes input output temp user; do
  link="$COMFY_DIR/$name"
  target="$BASE_DIR/$name"
  rm -rf "$link"
  ln -s "$target" "$link"
  echo "üîó $link -> $target"
done

echo "‚úÖ Workspace ready at $BASE_DIR"



11111111111111111111111111111111


# === Kaggle Cell 3: Download models (HF wget) ===
import os

# üîë Token HF (kosongkan jika repo publik)
HF_TOKEN = ""

# Lokasi model di Kaggle workspace
drive_model_path = "/kaggle/working/ComfyData/models"

paths = {
    # Diffusion model (Flux) ‚Üí folder benar: diffusion_models
    "diffusion": {
        "filename": "flux1-dev-Q4_0.gguf",
        "url": "https://huggingface.co/city96/FLUX.1-dev-gguf/resolve/main/flux1-dev-Q4_0.gguf?download=true",
        "folder": "diffusion_models"
    },
    # CLIP encoders
    "clip_t5_q5": {
        "filename": "t5-v1_1-xxl-encoder-Q5_K_M.gguf",
        "url": "https://huggingface.co/city96/t5-v1_1-xxl-encoder-gguf/resolve/main/t5-v1_1-xxl-encoder-Q5_K_M.gguf?download=true",
        "folder": "clip"
    },
    "clip_t5_q4": {
        "filename": "t5-v1_1-xxl-encoder-Q4_K_S.gguf",
        "url": "https://huggingface.co/city96/t5-v1_1-xxl-encoder-gguf/resolve/main/t5-v1_1-xxl-encoder-Q4_K_S.gguf?download=true",
        "folder": "clip"
    },
    # Dual Clip Loader
    "clip_l": {
        "filename": "clip_l.safetensors",
        "url": "https://huggingface.co/comfyanonymous/flux_text_encoders/resolve/main/clip_l.safetensors?download=true",
        "folder": "clip"
    },
    # VAE
    "vae": {
        "filename": "ae.safetensors",
        "url": "https://huggingface.co/Comfy-Org/Lumina_Image_2.0_Repackaged/resolve/main/split_files/vae/ae.safetensors?download=true",
        "folder": "vae"
    },
    # Upscale model
    "upscale": {
        "filename": "4x_NMKD-Siax_200k.pth",
        "url": "https://huggingface.co/Akumetsu971/SD_Anime_Futuristic_Armor/resolve/main/4x_NMKD-Siax_200k.pth?download=true",
        "folder": "upscale_models"
    }
}

for key, data in paths.items():
    folder_path = os.path.join(drive_model_path, data["folder"])
    file_path = os.path.join(folder_path, data["filename"])
    os.makedirs(folder_path, exist_ok=True)

    if not os.path.exists(file_path):
        print(f"‚¨áÔ∏è Mengunduh {data['filename']}...")
        # gunakan shell wget dari Python
        os.system(f'wget --header="Authorization: Bearer $HF_TOKEN" -O "{file_path}" "{data["url"]}"')
        print(f"‚úÖ {data['filename']} berhasil diunduh ke {folder_path}")
    else:
        print(f"‚úÖ {data['filename']} sudah ada, skip unduh.")

1111111111111111111111111111111


%%bash
# === Kaggle Cell 4: Download batch folders to input/ ===
set -e
pip install -q gdown

INPUT_DIR="/kaggle/working/ComfyData/input"
mkdir -p "$INPUT_DIR"

# up1
gdown --folder "https://drive.google.com/drive/folders/1E0Kkh2PA_ZY8RpQXBuTMDIcg5gRZX4Gh?usp=sharing" -O "$INPUT_DIR/up1"

# up2
gdown --folder "https://drive.google.com/drive/folders/17xgALN3fbz5O_YDCi8eAHtNnaHiKrbYv?usp=sharing" -O "$INPUT_DIR/up2"

# up3
gdown --folder "https://drive.google.com/drive/folders/1_iBbAPHZLukpYijf9vPiBBYqP9_5tSah?usp=sharing" -O "$INPUT_DIR/up3"

echo "‚úÖ Folder up1, up2, up3 sudah diunduh ke $INPUT_DIR"



11111111111111111111


%%bash
# === Kaggle Cell 5: Install Custom Nodes ===
set -e
cd /kaggle/working/ComfyUI/custom_nodes

# Bersihkan dulu jika ada sisa lama
rm -rf ComfyUI-Manager rgthree-comfy ComfyUI-Easy-Use was-node-suite-comfyui \
       ComfyUI-Impact-Pack ComfyUI-GGUF ComfyUI-TiledDiffusion

# Clone repositori custom nodes
git clone https://github.com/ltdrdata/ComfyUI-Manager.git
git clone https://github.com/rgthree/rgthree-comfy.git
git clone https://github.com/yolain/ComfyUI-Easy-Use.git
git clone https://github.com/ltdrdata/was-node-suite-comfyui.git
git clone https://github.com/ltdrdata/ComfyUI-Impact-Pack.git
git clone https://github.com/city96/ComfyUI-GGUF.git
git clone https://github.com/shiimizu/ComfyUI-TiledDiffusion.git

echo "‚úÖ Semua custom nodes berhasil di-install"



111111111111111111


%%bash
# === Kaggle Cell 6: Setup ngrok ===
set -e
cd /kaggle/working

# Hapus file ngrok lama jika ada
rm -f ngrok ngrok.zip ngrok-stable-linux-amd64.tgz

# Download ngrok versi Linux AMD64
wget -O ngrok-stable-linux-amd64.tgz https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.tgz
tar -xvzf ngrok-stable-linux-amd64.tgz
chmod +x ngrok

# üîë Masukkan token ngrok kamu di sini
./ngrok authtoken 31SHA7EHRu2DlbH0oEdGWTzHfeF_4c2RHUkeuQU6nJxuYvDLG

# Cek versi untuk memastikan ngrok terpasang
./ngrok version




111111111111111111111




# === Kaggle Cell 7: Run ngrok & get public URL ===
import subprocess, time, requests

# Jalankan ngrok di background
ngrok_process = subprocess.Popen(
    ['./ngrok', 'http', '8188'],
    stdout=subprocess.DEVNULL,
    stderr=subprocess.STDOUT
)

public_url = None
for i in range(10):
    try:
        r = requests.get('http://localhost:4040/api/tunnels')
        tunnels = r.json().get('tunnels')
        if tunnels:
            public_url = tunnels[0]['public_url']
            print(f"‚úÖ Ngrok tunnel established: {public_url}")
            break
    except Exception:
        print(f"‚è≥ Attempt {i+1}/10: Ngrok not ready yet...")
        time.sleep(2)

if not public_url:
    print("‚ùå Ngrok failed to start. Restart notebook and try again.")



1111111111111111111111


%%bash
# === Kaggle Cell 8: Run ComfyUI (foreground) ===
set -e
cd /kaggle/working/ComfyUI
python main.py --listen 0.0.0.0 --port 8188 --cuda-device 0
