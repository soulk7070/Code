{
  "name": "Microstock Workflow - Production Ready",
  "nodes": [
    {
      "parameters": {
        "updates": ["message"]
      },
      "id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
      "name": "Telegram Trigger",
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.1,
      "position": [240, 300],
      "webhookId": "telegram-webhook",
      "credentials": {
        "telegramApi": {
          "id": "telegram-creds",
          "name": "Telegram Bot"
        }
      }
    },
    {
      "parameters": {
        "dataType": "string",
        "value1": "={{ $json.message.text.split(' ')[0] }}",
        "rules": {
          "rules": [
            {
              "value2": "/start",
              "output": 0
            },
            {
              "value2": "/idea",
              "output": 1
            },
            {
              "value2": "/status",
              "output": 2
            },
            {
              "value2": "/retry",
              "output": 3
            }
          ]
        }
      },
      "id": "b2c3d4e5-f6g7-8901-bcde-f23456789012",
      "name": "Switch",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 1,
      "position": [460, 300]
    },
    {
      "parameters": {
        "chatId": "={{ $json.message.chat.id }}",
        "text": "Kirim ide mentah dengan format:\n/idea <teks ide>\n\nContoh:\n/idea A young man working with a laptop"
      },
      "id": "c3d4e5f6-g7h8-9012-cdef-345678901234",
      "name": "Telegram",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [680, 160],
      "credentials": {
        "telegramApi": {
          "id": "telegram-creds",
          "name": "Telegram Bot"
        }
      }
    },
    {
      "parameters": {
        "keepOnlySet": false,
        "values": {
          "string": [
            {
              "name": "base_idea",
              "value": "={{ $json.message.text.split(' ').slice(1).join(' ') }}"
            },
            {
              "name": "chat_id",
              "value": "={{ $json.message.chat.id }}"
            },
            {
              "name": "job_id",
              "value": "={{ (new Date().toISOString().replace(/[-:.TZ]/g,'')) + '_' + $json.message.chat.id }}"
            }
          ]
        },
        "options": {}
      },
      "id": "d4e5f6g7-h8i9-0123-defg-456789012345",
      "name": "Set",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [680, 240]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://openrouter.ai/api/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer YOUR_OPENROUTER_API_KEY"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "contentType": "json",
        "jsonBody": "{\n  \"model\": \"qwen/qwen-3-30b-a3b-instruct\",\n  \"temperature\": 0.9,\n  \"max_tokens\": 1200,\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are a microstock ideation assistant. Avoid similar content strictly. Each idea must target a different commercial theme.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"Base idea: \\\"{{ $json.base_idea }}\\\"\\n\\nGenerate exactly 6 DISTINCT microstock photo ideas.\\nRules:\\n- Use EACH theme once: [Business, Lifestyle, Technology, Education, Healthcare, Travel].\\n- Do NOT reuse settings (no repeated café/home office/coworking/park/etc.).\\n- For each idea: subject, setting, mood, buyer intent (why someone would purchase it).\\n- 1–2 lines per idea, numbered 1..6.\\n- No brands/logos.\"\n    }\n  ]\n}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "e5f6g7h8-i9j0-1234-efgh-567890123456",
      "name": "HTTP Request",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [900, 240]
    },
    {
      "parameters": {
        "functionCode": "// Parse 6 Ideas from Qwen response\nconst content = items[0].json.choices?.[0]?.message?.content || '';\nconst lines = content.split('\\n').map(s => s.trim()).filter(Boolean);\nconst themes = ['Business', 'Lifestyle', 'Technology', 'Education', 'Healthcare', 'Travel'];\nconst ideas = [];\n\nfor (const line of lines) {\n  const m = line.match(/^\\s*(\\d+)[\\).\\:\\-]?\\s*(.+)$/);\n  if (m) {\n    const idx = Number(m[1]);\n    const idea = m[2];\n    const theme = themes[ideas.length] || 'Misc';\n    ideas.push({ idx, idea, theme });\n  }\n}\n\nif (ideas.length !== 6) {\n  throw new Error(`Expected 6 ideas, got ${ideas.length}`);\n}\n\n// Attach job metadata\nreturn ideas.map(it => ({\n  json: {\n    job_id: items[0].json.job_id,\n    chat_id: items[0].json.chat_id,\n    base_idea: items[0].json.base_idea,\n    ...it,\n    status: 'brainstorm_done'\n  }\n}));"
      },
      "id": "f6g7h8i9-j0k1-2345-fghi-678901234567",
      "name": "Function",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1120, 240]
    },
    {
      "parameters": {
        "conditions": {
          "number": [
            {
              "value1": "={{ $json.idx }}",
              "operation": "smallerEqual",
              "value2": 3
            }
          ]
        }
      },
      "id": "g7h8i9j0-k1l2-3456-ghij-789012345678",
      "name": "IF",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [1340, 240]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro-latest:generateContent?key=YOUR_GEMINI_API_KEY",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "contentType": "json",
        "jsonBody": "{\n  \"contents\": [\n    {\n      \"role\": \"user\",\n      \"parts\": [\n        {\n          \"text\": \"You refine raw ideas into commercial-ready microstock concepts. Return strict JSON only. No markdown, no extra prose.\\n\\nRefine this raw idea into a structured microstock concept JSON.\\n\\nRaw idea: \\\"{{ $json.idea }}\\\"\\n\\nOutput STRICT JSON with this schema (no code fence, no markdown):\\n{\\n  \\\"title\\\": \\\"\\\",\\n  \\\"subject\\\": \\\"\\\",\\n  \\\"environment\\\": \\\"\\\",\\n  \\\"lighting\\\": \\\"\\\",\\n  \\\"commercial\\\": { \\\"copyspace\\\": true, \\\"brand_free\\\": true, \\\"neutral_props\\\": true },\\n  \\\"photography_style\\\": { \\\"angle\\\": \\\"\\\", \\\"lens\\\": \\\"\\\", \\\"depth_of_field\\\": \\\"\\\" },\\n  \\\"keywords\\\": [\\\"\\\", \\\"\\\"],\\n  \\\"category\\\": \\\"Business|Lifestyle|Technology|Education|Healthcare|Travel|Finance|Sustainability|Family|Culture\\\",\\n  \\\"notes\\\": \\\"short buyer rationale\\\"\\n}\\n\\nConstraints:\\n- Global, brand-free, culturally respectful.\\n- Keywords: 20–25 (comma-free items), mix generic+specific.\\n- Choose a single best category from the list.\\n- Output MUST be valid JSON.\"\n        }\n      ]\n    }\n  ],\n  \"generationConfig\": {\n    \"temperature\": 0.7,\n    \"maxOutputTokens\": 900\n  }\n}",
        "options": {}
      },
      "id": "h8i9j0k1-l2m3-4567-hijk-890123456789",
      "name": "HTTP Request1",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1560, 160]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro-latest:generateContent?key=YOUR_GEMINI_API_KEY",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "contentType": "json",
        "jsonBody": "{\n  \"contents\": [\n    {\n      \"role\": \"user\",\n      \"parts\": [\n        {\n          \"text\": \"You refine raw ideas into commercial-ready microstock concepts. Return strict JSON only. No markdown, no extra prose.\\n\\nRefine this raw idea into a structured microstock concept JSON.\\n\\nRaw idea: \\\"{{ $json.idea }}\\\"\\n\\nOutput STRICT JSON with this schema (no code fence, no markdown):\\n{\\n  \\\"title\\\": \\\"\\\",\\n  \\\"subject\\\": \\\"\\\",\\n  \\\"environment\\\": \\\"\\\",\\n  \\\"lighting\\\": \\\"\\\",\\n  \\\"commercial\\\": { \\\"copyspace\\\": true, \\\"brand_free\\\": true, \\\"neutral_props\\\": true },\\n  \\\"photography_style\\\": { \\\"angle\\\": \\\"\\\", \\\"lens\\\": \\\"\\\", \\\"depth_of_field\\\": \\\"\\\" },\\n  \\\"keywords\\\": [\\\"\\\", \\\"\\\"],\\n  \\\"category\\\": \\\"Business|Lifestyle|Technology|Education|Healthcare|Travel|Finance|Sustainability|Family|Culture\\\",\\n  \\\"notes\\\": \\\"short buyer rationale\\\"\\n}\\n\\nConstraints:\\n- Global, brand-free, culturally respectful.\\n- Keywords: 20–25 (comma-free items), mix generic+specific.\\n- Choose a single best category from the list.\\n- Output MUST be valid JSON.\"\n        }\n      ]\n    }\n  ],\n  \"generationConfig\": {\n    \"temperature\": 0.7,\n    \"maxOutputTokens\": 900\n  }\n}",
        "options": {}
      },
      "id": "i9j0k1l2-m3n4-5678-ijkl-901234567890",
      "name": "HTTP Request2",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [1560, 320]
    },
    {
      "parameters": {
        "functionCode": "// Parse Gemini JSON response\nconst raw = items[0].json.candidates?.[0]?.content?.parts?.[0]?.text || '';\nlet refined;\n\ntry {\n  refined = JSON.parse(raw);\n} catch (e) {\n  // Try to clean markdown if present\n  const cleaned = raw.replace(/```json\\n|```/g, '').trim();\n  try {\n    refined = JSON.parse(cleaned);\n  } catch (e2) {\n    throw new Error(`Gemini returned invalid JSON: ${e2.message}`);\n  }\n}\n\nreturn [{\n  json: {\n    ...items[0].json,\n    refined_json: refined,\n    copyspace: !!refined?.commercial?.copyspace,\n    status: 'refine_done'\n  }\n}];"
      },
      "id": "j0k1l2m3-n4o5-6789-jklm-012345678901",
      "name": "Function1",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1780, 160]
    },
    {
      "parameters": {
        "functionCode": "// Parse Gemini JSON response\nconst raw = items[0].json.candidates?.[0]?.content?.parts?.[0]?.text || '';\nlet refined;\n\ntry {\n  refined = JSON.parse(raw);\n} catch (e) {\n  // Try to clean markdown if present\n  const cleaned = raw.replace(/```json\\n|```/g, '').trim();\n  try {\n    refined = JSON.parse(cleaned);\n  } catch (e2) {\n    throw new Error(`Gemini returned invalid JSON: ${e2.message}`);\n  }\n}\n\nreturn [{\n  json: {\n    ...items[0].json,\n    refined_json: refined,\n    copyspace: !!refined?.commercial?.copyspace,\n    status: 'refine_done'\n  }\n}];"
      },
      "id": "k1l2m3n4-o5p6-7890-klmn-123456789012",
      "name": "Function2",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1780, 320]
    },
    {
      "parameters": {
        "mode": "append"
      },
      "id": "l2m3n4o5-p6q7-8901-lmno-234567890123",
      "name": "Merge",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [2000, 240]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://openrouter.ai/api/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer YOUR_OPENROUTER_API_KEY"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "contentType": "json",
        "jsonBody": "{\n  \"model\": \"qwen/qwen-3-30b-a3b-instruct\",\n  \"temperature\": 0.7,\n  \"max_tokens\": 600,\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You convert refined microstock concepts into a single Flux Dev prompt string. No negative prompt. Brand-free. Commercially usable.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"Convert this JSON concept into ONE Flux Dev prompt string.\\n\\nJSON:\\n{{ JSON.stringify($json.refined_json) }}\\n\\nRules:\\n- Output exactly ONE line (no line breaks, no markdown), English only.\\n- Length 40–70 words, natural descriptive sentence (not keyword list).\\n- Structure order:\\n  [Subject] – [Action/pose & framing] – [Location/context & time] – [Lighting] – [Lens/camera & composition] – [Color palette & mood] – [Technical quality details] – [Stock requirements]\\n- Include the phrases \\\"brand-free\\\" and \\\"generic props\\\".\\n- If commercial.copyspace is true, specify the copy space location (e.g., \\\"ample copy space on the right\\\").\\n- No artist names. No negative wording.\"\n    }\n  ]\n}",
        "options": {}
      },
      "id": "m3n4o5p6-q7r8-9012-mnop-345678901234",
      "name": "HTTP Request3",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 3,
      "position": [2220, 240]
    },
    {
      "parameters": {
        "functionCode": "// Extract Flux prompt from Qwen response\nconst content = items[0].json.choices?.[0]?.message?.content || '';\n// Ensure 1 line\nconst oneLine = content.replace(/\\s+/g, ' ').trim();\n\nreturn [{\n  json: {\n    ...items[0].json,\n    prompt_flux: oneLine,\n    status: 'prompt_done'\n  }\n}];"
      },
      "id": "n4o5p6q7-r8s9-0123-nopq-456789012345",
      "name": "Function3",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [2440, 240]
    },
    {
      "parameters": {
        "chatId": "={{ $items()[0].json.chat_id }}",
        "text": "✅ Selesai — 6 prompt Flux tersimpan\nJob: {{ $items()[0].json.job_id }}\n\nContoh:\n1) {{ $items()[0].json.prompt_flux }}\n2) {{ $items()[1].json.prompt_flux }}\n\nTotal: {{ $items().length }} prompts generated"
      },
      "id": "o5p6q7r8-s9t0-1234-opqr-567890123456",
      "name": "Telegram1",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.1,
      "position": [2660, 240],
      "credentials": {
        "telegramApi": {
          "id": "telegram-creds",
          "name": "Telegram Bot"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Switch",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Switch": {
      "main": [
        [
          {
            "node": "Telegram",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set",
            "type": "main",
            "index": 0
          }
        ],
        [],
        []
      ]
    },
    "Set": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Function",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function": {
      "main": [
        [
          {
            "node": "IF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "IF": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "Function1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request2": {
      "main": [
        [
          {
            "node": "Function2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function1": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function2": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "HTTP Request3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request3": {
      "main": [
        [
          {
            "node": "Function3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function3": {
      "main": [
        [
          {
            "node": "Telegram1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "1",
  "meta": {
    "instanceId": "your-instance-id"
  },
  "id": "your-workflow-id",
  "tags": []
}
