{
  "name": "Microstock Workflow - Production Ready",
  "nodes": [
    {
      "parameters": {
        "updates": [
          "message"
        ]
      },
    {
      "parameters": {
        "chatId": "={{ $json.job_id ? $json.chat_id : $items()[0].json.chat_id }}",
        "text": "✅ Selesai — 6 prompt Flux tersimpan\nJob: {{ $json.job_id || $items()[0].json.job_id }}\n\nSheets:\n- CONCEPTS (jejak)\n- PROMPTS_ONLY (kolom A)\n\nContoh:\n1) {{ $items()[0].json.prompt_flux }}\n2) {{ $items()[1].json.prompt_flux }}\n\nTotal: {{ $items().length }} prompts generated"
      },
      "id": "success-notification",
      "name": "Success Notification",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        3440,
        240
      ],
      "credentials": {
        "telegramApi": {
          "id": "telegram-bot-creds",
          "name": "Telegram Bot Token"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $json.chat_id }}",
        "text": "⚠️ Gagal Gemini refine (batch).\nAlasan: {{ $json.error || 'rate limit' }}\n\nAksi:\n- /retry {{ $json.job_id }}\n- /retry {{ $json.job_id }} refine\n- Coba lagi dalam beberapa menit"
      },
      "id": "gemini-error-notification",
      "name": "Gemini Error Notification",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        2340,
        520
      ],
      "credentials": {
        "telegramApi": {
          "id": "telegram-bot-creds",
          "name": "Telegram Bot Token"
        }
      }
    },
    {
      "parameters": {
        "chatId": "={{ $json.chat_id }}",
        "text": "⚠️ Gagal simpan ke Sheets (idx #{{ $json.idx }}).\n\nPrompt disertakan:\n{{ $json.prompt_flux }}\n\nAksi:\n- /retry {{ $json.job_id }} sheets {{ $json.idx }}"
      },
      "id": "sheets-error-notification",
      "name": "Sheets Error Notification",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        3220,
        520
      ],
      "credentials": {
        "telegramApi": {
          "id": "telegram-bot-creds",
          "name": "Telegram Bot Token"
        }
      }
    },
    {
      "parameters": {
        "key": "llm_keys"
      },
      "id": "data-store-get",
      "name": "Data Store Get",
      "type": "n8n-nodes-base.dataStore",
      "typeVersion": 1,
      "position": [
        900,
        240
      ]
    },
    {
      "parameters": {
        "key": "llm_keys"
      },
      "id": "data-store-get-keys",
      "name": "Data Store Get Keys",
      "type": "n8n-nodes-base.dataStore",
      "typeVersion": 1,
      "position": [
        1800,
        320
      ]
    },
    {
      "parameters": {
        "key": "llm_keys",
        "value": "={{ $json }}"
      },
      "id": "data-store-set",
      "name": "Data Store Set",
      "type": "n8n-nodes-base.dataStore",
      "typeVersion": 1,
      "position": [
        1660,
        160
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "gemini-rate-limit",
              "leftValue": "={{ $json.statusCode }}",
              "rightValue": 429,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "check-gemini-limit-a",
      "name": "Check Gemini Limit A",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        2120,
        160
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "gemini-rate-limit-b",
              "leftValue": "={{ $json.statusCode }}",
              "rightValue": 429,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "check-gemini-limit-b",
      "name": "Check Gemini Limit B",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        2120,
        520
      ]
    },
    {
      "parameters": {
        "jsCode": "// Rotate Gemini API key\nconst dsGet = await $('Data Store Get Keys').first().json;\nconst currentKeys = dsGet.gemini_keys || ['YOUR_GEMINI_KEY'];\nconst currentIdx = dsGet.gemini_idx || 0;\nconst newIdx = (currentIdx + 1) % currentKeys.length;\n\n// Update the index\n$store.llm_keys = {\n  ...dsGet,\n  gemini_idx: newIdx\n};\n\nreturn [{\n  json: {\n    rotated: true,\n    old_idx: currentIdx,\n    new_idx: newIdx,\n    new_key: currentKeys[newIdx].substring(0, 8) + '...'\n  }\n}];"
      },
      "id": "rotate-gemini-key",
      "name": "Rotate Gemini Key",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2340,
        80
      ]
    },
    {
      "parameters": {
        "chatId": "={{ $json.message.chat.id }}",
        "text": "Command tidak dikenali. Gunakan:\n/start - bantuan\n/idea <teks> - buat 6 prompt\n/status <job_id> - cek status\n/retry <job_id> - retry job"
      },
      "id": "help-fallback",
      "name": "Help Fallback",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        680,
        380
      ],
      "credentials": {
        "telegramApi": {
          "id": "telegram-bot-creds",
          "name": "Telegram Bot Token"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Telegram Trigger": {
      "main": [
        [
          {
            "node": "Command Router",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Command Router": {
      "main": [
        [
          {
            "node": "Help Response",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Set Base Idea",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Help Fallback",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Help Fallback",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Help Fallback",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Base Idea": {
      "main": [
        [
          {
            "node": "Data Store Get",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Data Store Get": {
      "main": [
        [
          {
            "node": "Qwen Brainstorm",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Qwen Brainstorm": {
      "main": [
        [
          {
            "node": "Check OpenRouter Limit",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Check OpenRouter Limit",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check OpenRouter Limit": {
      "main": [
        [
          {
            "node": "Rotate OpenRouter Key",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Parse Ideas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Rotate OpenRouter Key": {
      "main": [
        [
          {
            "node": "Data Store Set",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Data Store Set": {
      "main": [
        [
          {
            "node": "Qwen Brainstorm",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Ideas": {
      "main": [
        [
          {
            "node": "Split Ideas",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Ideas": {
      "main": [
        [
          {
            "node": "Data Store Get Keys",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Data Store Get Keys",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Data Store Get Keys": {
      "main": [
        [
          {
            "node": "Gemini Refine A (1-3)",
            "type": "main",
            "index": 0
          },
          {
            "node": "Gemini Refine B (4-6)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gemini Refine A (1-3)": {
      "main": [
        [
          {
            "node": "Parse Gemini JSON A",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Check Gemini Limit A",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gemini Refine B (4-6)": {
      "main": [
        [
          {
            "node": "Parse Gemini JSON B",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Check Gemini Limit B",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Gemini JSON A": {
      "main": [
        [
          {
            "node": "Refine Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Gemini JSON B": {
      "main": [
        [
          {
            "node": "Refine Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Check Gemini Limit A": {
      "main": [
        [
          {
            "node": "Rotate Gemini Key",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Gemini Error Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Check Gemini Limit B": {
      "main": [
        [
          {
            "node": "Rotate Gemini Key",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Gemini Error Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Rotate Gemini Key": {
      "main": [
        [
          {
            "node": "Gemini Refine A (1-3)",
            "type": "main",
            "index": 0
          },
          {
            "node": "Gemini Refine B (4-6)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Refine Merge": {
      "main": [
        [
          {
            "node": "Qwen Prompt Builder",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Qwen Prompt Builder": {
      "main": [
        [
          {
            "node": "Extract Prompt Flux",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Prompt Flux": {
      "main": [
        [
          {
            "node": "Append CONCEPTS",
            "type": "main",
            "index": 0
          },
          {
            "node": "Append PROMPTS_ONLY",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append CONCEPTS": {
      "main": [
        [
          {
            "node": "Final Merge",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Sheets Error Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Append PROMPTS_ONLY": {
      "main": [
        [
          {
            "node": "Final Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Final Merge": {
      "main": [
        [
          {
            "node": "Success Notification",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1",
    "saveManualExecutions": true,
    "callerPolicy": "workflowsFromSameOwner",
    "errorWorkflow": {
      "id": "",
      "name": ""
    }
  },
  "versionId": "1",
  "meta": {
    "templateCredsSetupCompleted": false,
    "instanceId": "your-instance-id"
  },
  "id": "your-workflow-id",
  "tags": [
    {
      "createdAt": "2025-01-15T10:00:00.000Z",
      "updatedAt": "2025-01-15T10:00:00.000Z",
      "id": "microstock-tag",
      "name": "microstock"
    }
  ]
}
      "id": "telegram-trigger",
      "name": "Telegram Trigger",
      "type": "n8n-nodes-base.telegramTrigger",
      "typeVersion": 1.1,
      "position": [
        240,
        300
      ],
      "webhookId": "telegram-webhook",
      "credentials": {
        "telegramApi": {
          "id": "telegram-bot-creds",
          "name": "Telegram Bot Token"
        }
      }
    },
    {
      "parameters": {
        "mode": "rules",
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true
                },
                "conditions": [
                  {
                    "id": "start-cmd",
                    "leftValue": "={{ $json.message.text.split(' ')[0] }}",
                    "rightValue": "/start",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "start"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true
                },
                "conditions": [
                  {
                    "id": "idea-cmd",
                    "leftValue": "={{ $json.message.text.split(' ')[0] }}",
                    "rightValue": "/idea",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "idea"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true
                },
                "conditions": [
                  {
                    "id": "status-cmd",
                    "leftValue": "={{ $json.message.text.split(' ')[0] }}",
                    "rightValue": "/status",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "status"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true
                },
                "conditions": [
                  {
                    "id": "retry-cmd",
                    "leftValue": "={{ $json.message.text.split(' ')[0] }}",
                    "rightValue": "/retry",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    }
                  }
                ]
              },
              "renameOutput": true,
              "outputKey": "retry"
            }
          ]
        },
        "fallbackOutput": "extra"
      },
      "id": "command-router",
      "name": "Command Router",
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "chatId": "={{ $json.message.chat.id }}",
        "text": "Kirim ide mentah dengan format:\n/idea <teks ide>\n\nContoh:\n/idea A young man working with a laptop"
      },
      "id": "help-response",
      "name": "Help Response",
      "type": "n8n-nodes-base.telegram",
      "typeVersion": 1.2,
      "position": [
        680,
        160
      ],
      "credentials": {
        "telegramApi": {
          "id": "telegram-bot-creds",
          "name": "Telegram Bot Token"
        }
      }
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "base-idea",
              "name": "base_idea",
              "value": "={{ $json.message.text.split(' ').slice(1).join(' ') }}",
              "type": "string"
            },
            {
              "id": "chat-id",
              "name": "chat_id",
              "value": "={{ $json.message.chat.id }}",
              "type": "string"
            },
            {
              "id": "job-id",
              "name": "job_id",
              "value": "={{ (new Date().toISOString().replace(/[-:.TZ]/g,'')) + '_' + $json.message.chat.id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "id": "set-base-idea",
      "name": "Set Base Idea",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        680,
        240
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://openrouter.ai/api/v1/chat/completions",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $('Data Store Get').first().json.openrouter_keys[$('Data Store Get').first().json.openrouter_idx] || 'YOUR_OPENROUTER_KEY' }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            },
            {
              "name": "HTTP-Referer",
              "value": "https://n8n-microstock.local"
            },
            {
              "name": "X-Title",
              "value": "n8n Microstock Generator"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": []
        },
        "jsonBody": "{\n  \"model\": \"qwen/qwen-3-30b-a3b-instruct\",\n  \"temperature\": 0.9,\n  \"max_tokens\": 1200,\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You are a microstock ideation assistant. Avoid similar content strictly. Each idea must target a different commercial theme.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"Base idea: \\\"{{ $json.base_idea }}\\\"\\n\\nGenerate exactly 6 DISTINCT microstock photo ideas.\\nRules:\\n- Use EACH theme once: [Business, Lifestyle, Technology, Education, Healthcare, Travel].\\n- Do NOT reuse settings (no repeated café/home office/coworking/park/etc.).\\n- For each idea: subject, setting, mood, buyer intent (why someone would purchase it).\\n- 1–2 lines per idea, numbered 1..6.\\n- No brands/logos.\"\n    }\n  ]\n}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          },
          "timeout": 30000
        }
      },
      "id": "qwen-brainstorm",
      "name": "Qwen Brainstorm",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1020,
        240
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "rate-limit-check",
              "leftValue": "={{ $json.statusCode }}",
              "rightValue": 429,
              "operator": {
                "type": "number",
                "operation": "equals"
              }
            }
          ],
          "combinator": "or"
        },
        "options": {}
      },
      "id": "check-openrouter-limit",
      "name": "Check OpenRouter Limit",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1240,
        240
      ]
    },
    {
      "parameters": {
        "jsCode": "// Rotate OpenRouter API key\nconst dsGet = await $('Data Store Get').first().json;\nconst currentKeys = dsGet.openrouter_keys || ['YOUR_OPENROUTER_KEY'];\nconst currentIdx = dsGet.openrouter_idx || 0;\nconst newIdx = (currentIdx + 1) % currentKeys.length;\n\n// Update the index\n$store.llm_keys = {\n  ...dsGet,\n  openrouter_idx: newIdx\n};\n\nreturn [{\n  json: {\n    rotated: true,\n    old_idx: currentIdx,\n    new_idx: newIdx,\n    new_key: currentKeys[newIdx].substring(0, 8) + '...'\n  }\n}];"
      },
      "id": "rotate-openrouter-key",
      "name": "Rotate OpenRouter Key",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1460,
        160
      ]
    },
    {
      "parameters": {
        "jsCode": "// Parse 6 Ideas from Qwen response\nconst content = $json.choices?.[0]?.message?.content || '';\nconst lines = content.split('\\n').map(s => s.trim()).filter(Boolean);\nconst themes = ['Business', 'Lifestyle', 'Technology', 'Education', 'Healthcare', 'Travel'];\nconst ideas = [];\n\nfor (const line of lines) {\n  const m = line.match(/^\\s*(\\d+)[\\).\\:\\-]?\\s*(.+)$/);\n  if (m) {\n    const idx = Number(m[1]);\n    const idea = m[2];\n    const theme = themes[ideas.length] || 'Misc';\n    ideas.push({ idx, idea, theme });\n  }\n}\n\nif (ideas.length !== 6) {\n  throw new Error(`Expected 6 ideas, got ${ideas.length}`);\n}\n\n// Attach job metadata\nreturn ideas.map(it => ({\n  json: {\n    job_id: $json.job_id,\n    chat_id: $json.chat_id,\n    base_idea: $json.base_idea,\n    ...it,\n    status: 'brainstorm_done'\n  }\n}));"
      },
      "id": "parse-ideas",
      "name": "Parse Ideas",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1460,
        320
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict"
          },
          "conditions": [
            {
              "id": "first-half",
              "leftValue": "={{ $json.idx }}",
              "rightValue": 3,
              "operator": {
                "type": "number",
                "operation": "lte"
              }
            }
          ]
        },
        "options": {}
      },
      "id": "split-ideas",
      "name": "Split Ideas",
      "type": "n8n-nodes-base.if",
      "typeVersion": 2,
      "position": [
        1680,
        320
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro-latest:generateContent?key={{ $('Data Store Get Keys').first().json.gemini_keys[$('Data Store Get Keys').first().json.gemini_idx] || 'YOUR_GEMINI_KEY' }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "jsonBody": "{\n  \"contents\": [\n    {\n      \"role\": \"user\",\n      \"parts\": [\n        {\n          \"text\": \"You refine raw ideas into commercial-ready microstock concepts. Return strict JSON only. No markdown, no extra prose.\\n\\nRefine this raw idea into a structured microstock concept JSON.\\n\\nRaw idea: \\\"{{ $json.idea }}\\\"\\n\\nOutput STRICT JSON with this schema (no code fence, no markdown):\\n{\\n  \\\"title\\\": \\\"\\\",\\n  \\\"subject\\\": \\\"\\\",\\n  \\\"environment\\\": \\\"\\\",\\n  \\\"lighting\\\": \\\"\\\",\\n  \\\"commercial\\\": { \\\"copyspace\\\": true, \\\"brand_free\\\": true, \\\"neutral_props\\\": true },\\n  \\\"photography_style\\\": { \\\"angle\\\": \\\"\\\", \\\"lens\\\": \\\"\\\", \\\"depth_of_field\\\": \\\"\\\" },\\n  \\\"keywords\\\": [\\\"\\\", \\\"\\\"],\\n  \\\"category\\\": \\\"Business|Lifestyle|Technology|Education|Healthcare|Travel|Finance|Sustainability|Family|Culture\\\",\\n  \\\"notes\\\": \\\"short buyer rationale\\\"\\n}\\n\\nConstraints:\\n- Global, brand-free, culturally respectful.\\n- Keywords: 20–25 (comma-free items), mix generic+specific.\\n- Choose a single best category from the list.\\n- Output MUST be valid JSON.\"\n        }\n      ]\n    }\n  ],\n  \"generationConfig\": {\n    \"temperature\": 0.7,\n    \"maxOutputTokens\": 900\n  }\n}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          },
          "timeout": 30000
        }
      },
      "id": "gemini-refine-a",
      "name": "Gemini Refine A (1-3)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1900,
        240
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "=https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro-latest:generateContent?key={{ $('Data Store Get Keys').first().json.gemini_keys[$('Data Store Get Keys').first().json.gemini_idx] || 'YOUR_GEMINI_KEY' }}",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "jsonBody": "{\n  \"contents\": [\n    {\n      \"role\": \"user\",\n      \"parts\": [\n        {\n          \"text\": \"You refine raw ideas into commercial-ready microstock concepts. Return strict JSON only. No markdown, no extra prose.\\n\\nRefine this raw idea into a structured microstock concept JSON.\\n\\nRaw idea: \\\"{{ $json.idea }}\\\"\\n\\nOutput STRICT JSON with this schema (no code fence, no markdown):\\n{\\n  \\\"title\\\": \\\"\\\",\\n  \\\"subject\\\": \\\"\\\",\\n  \\\"environment\\\": \\\"\\\",\\n  \\\"lighting\\\": \\\"\\\",\\n  \\\"commercial\\\": { \\\"copyspace\\\": true, \\\"brand_free\\\": true, \\\"neutral_props\\\": true },\\n  \\\"photography_style\\\": { \\\"angle\\\": \\\"\\\", \\\"lens\\\": \\\"\\\", \\\"depth_of_field\\\": \\\"\\\" },\\n  \\\"keywords\\\": [\\\"\\\", \\\"\\\"],\\n  \\\"category\\\": \\\"Business|Lifestyle|Technology|Education|Healthcare|Travel|Finance|Sustainability|Family|Culture\\\",\\n  \\\"notes\\\": \\\"short buyer rationale\\\"\\n}\\n\\nConstraints:\\n- Global, brand-free, culturally respectful.\\n- Keywords: 20–25 (comma-free items), mix generic+specific.\\n- Choose a single best category from the list.\\n- Output MUST be valid JSON.\"\n        }\n      ]\n    }\n  ],\n  \"generationConfig\": {\n    \"temperature\": 0.7,\n    \"maxOutputTokens\": 900\n  }\n}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          },
          "timeout": 30000
        }
      },
      "id": "gemini-refine-b",
      "name": "Gemini Refine B (4-6)",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1900,
        400
      ],
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "jsCode": "// Parse Gemini JSON response\nconst raw = $json.candidates?.[0]?.content?.parts?.[0]?.text || '';\nlet refined;\n\ntry {\n  refined = JSON.parse(raw);\n} catch (e) {\n  // Try to clean markdown if present\n  const cleaned = raw.replace(/```json\\n|```/g, '').trim();\n  try {\n    refined = JSON.parse(cleaned);\n  } catch (e2) {\n    throw new Error(`Gemini_A returned invalid JSON: ${e2.message}`);\n  }\n}\n\nreturn [{\n  json: {\n    ...$json, // carries job_id, idx, idea, theme, etc\n    refined_json: refined,\n    copyspace: !!refined?.commercial?.copyspace,\n    status: 'refine_done'\n  }\n}];"
      },
      "id": "parse-gemini-json-a",
      "name": "Parse Gemini JSON A",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2120,
        240
      ]
    },
    {
      "parameters": {
        "jsCode": "// Parse Gemini JSON response\nconst raw = $json.candidates?.[0]?.content?.parts?.[0]?.text || '';\nlet refined;\n\ntry {\n  refined = JSON.parse(raw);\n} catch (e) {\n  // Try to clean markdown if present\n  const cleaned = raw.replace(/```json\\n|```/g, '').trim();\n  try {\n    refined = JSON.parse(cleaned);\n  } catch (e2) {\n    throw new Error(`Gemini_B returned invalid JSON: ${e2.message}`);\n  }\n}\n\nreturn [{\n  json: {\n    ...$json, // carries job_id, idx, idea, theme, etc\n    refined_json: refined,\n    copyspace: !!refined?.commercial?.copyspace,\n    status: 'refine_done'\n  }\n}];"
      },
      "id": "parse-gemini-json-b",
      "name": "Parse Gemini JSON B",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2120,
        400
      ]
    },
    {
      "parameters": {
        "mode": "append"
      },
      "id": "refine-merge",
      "name": "Refine Merge",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        2340,
        320
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://openrouter.ai/api/v1/chat/completions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "Bearer {{ $('Data Store Get Keys').first().json.openrouter_keys[$('Data Store Get Keys').first().json.openrouter_idx] || 'YOUR_OPENROUTER_KEY' }}"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "jsonBody": "{\n  \"model\": \"qwen/qwen-3-30b-a3b-instruct\",\n  \"temperature\": 0.7,\n  \"max_tokens\": 600,\n  \"messages\": [\n    {\n      \"role\": \"system\",\n      \"content\": \"You convert refined microstock concepts into a single Flux Dev prompt string. No negative prompt. Brand-free. Commercially usable.\"\n    },\n    {\n      \"role\": \"user\",\n      \"content\": \"Convert this JSON concept into ONE Flux Dev prompt string.\\n\\nJSON:\\n{{ JSON.stringify($json.refined_json) }}\\n\\nRules:\\n- Output exactly ONE line (no line breaks, no markdown), English only.\\n- Length 40–70 words, natural descriptive sentence (not keyword list).\\n- Structure order:\\n  [Subject] – [Action/pose & framing] – [Location/context & time] – [Lighting] – [Lens/camera & composition] – [Color palette & mood] – [Technical quality details] – [Stock requirements]\\n- Include the phrases \\\"brand-free\\\" and \\\"generic props\\\".\\n- If commercial.copyspace is true, specify the copy space location (e.g., \\\"ample copy space on the right\\\").\\n- No artist names. No negative wording.\"\n    }\n  ]\n}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          },
          "timeout": 30000
        }
      },
      "id": "qwen-prompt-builder",
      "name": "Qwen Prompt Builder",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        2560,
        320
      ]
    },
    {
      "parameters": {
        "jsCode": "// Extract Flux prompt from Qwen response\nconst content = $json.choices?.[0]?.message?.content || '';\n// Ensure 1 line\nconst oneLine = content.replace(/\\s+/g, ' ').trim();\n\nreturn [{\n  json: {\n    ...$json,\n    prompt_flux: oneLine,\n    status: 'prompt_done'\n  }\n}];"
      },
      "id": "extract-prompt-flux",
      "name": "Extract Prompt Flux",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2780,
        320
      ]
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "YOUR_SPREADSHEET_ID",
          "mode": "list",
          "cachedResultName": "CONCEPTS Sheet"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "CONCEPTS"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "job_id": "={{ $json.job_id }}",
            "idx": "={{ $json.idx }}",
            "theme": "={{ $json.theme }}",
            "base_idea": "={{ $json.base_idea }}",
            "title": "={{ $json.refined_json.title }}",
            "refined_json": "={{ JSON.stringify($json.refined_json) }}",
            "prompt_flux": "={{ $json.prompt_flux }}",
            "copyspace": "={{ $json.copyspace }}",
            "status": "sheet_done",
            "created_at": "={{ new Date().toISOString() }}"
          },
          "matchingColumns": [
            "job_id",
            "idx",
            "theme",
            "base_idea",
            "title",
            "refined_json",
            "prompt_flux",
            "copyspace",
            "status",
            "created_at"
          ],
          "schema": [
            {
              "id": "job_id",
              "displayName": "job_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "idx",
              "displayName": "idx",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "theme",
              "displayName": "theme",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "base_idea",
              "displayName": "base_idea",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "title",
              "displayName": "title",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "refined_json",
              "displayName": "refined_json",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "prompt_flux",
              "displayName": "prompt_flux",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "copyspace",
              "displayName": "copyspace",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "created_at",
              "displayName": "created_at",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ]
        },
        "options": {
          "cellFormat": "USER_ENTERED"
        }
      },
      "id": "append-concepts",
      "name": "Append CONCEPTS",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.4,
      "position": [
        3000,
        240
      ],
      "onError": "continueErrorOutput",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "google-sheets-creds",
          "name": "Google Sheets OAuth2"
        }
      },
      "retryOnFail": true,
      "maxTries": 3
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "YOUR_PROMPTS_SPREADSHEET_ID",
          "mode": "list",
          "cachedResultName": "PROMPTS_ONLY Sheet"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "PROMPTS_ONLY"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "prompt": "={{ $json.prompt_flux }}"
          },
          "matchingColumns": [
            "prompt"
          ],
          "schema": [
            {
              "id": "prompt",
              "displayName": "prompt",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ]
        },
        "options": {}
      },
      "id": "append-prompts-only",
      "name": "Append PROMPTS_ONLY",
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.4,
      "position": [
        3000,
        400
      ],
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "google-sheets-creds",
          "name": "Google Sheets OAuth2"
        }
      }
    },
    {
      "parameters": {
        "mode": "append"
      },
      "id": "final-merge",
      "name": "Final Merge",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        3220,
        320
      ]
    },
